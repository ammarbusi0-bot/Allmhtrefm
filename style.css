// =======================================================
// متغیرات التخزين
// =======================================================
let userName = localStorage.getItem('userName') || '';
let userPoints = parseInt(localStorage.getItem('userPoints')) || 0;
let totalAnswered = parseInt(localStorage.getItem('totalAnswered')) || 0;
let totalCorrect = parseInt(localStorage.getItem('totalCorrect')) || 0;
let totalWrong = parseInt(localStorage.getItem('totalWrong')) || 0;

// متغیرات اللعب
let currentQuestionIndex = 0;
let currentQuestions = [];
let timerInterval;
let TIME_LIMIT = 15;
const HISTORY = ['splash-screen']; // تتبع تاريخ الشاشات

// =======================================================
// الوظائف المساعدة
// =======================================================

function saveUserData() {
    localStorage.setItem('userName', userName);
    localStorage.setItem('userPoints', userPoints);
    localStorage.setItem('totalAnswered', totalAnswered);
    localStorage.setItem('totalCorrect', totalCorrect);
    localStorage.setItem('totalWrong', totalWrong);
}

function updatePointsDisplay() {
    document.getElementById('user-points').textContent = userPoints;
    document.getElementById('profile-points').textContent = userPoints;
}

// =======================================================
// وظيفة تبديل وعرض الشاشات (الحل لمشكلة عدم الإخفاء)
// =======================================================

function updateBackButton(currentScreenId) {
    const backBtn = document.getElementById('back-btn');
    if (currentScreenId !== 'main-menu' && currentScreenId !== 'splash-screen') {
        backBtn.style.display = 'flex';
    } else {
        backBtn.style.display = 'none';
    }
}

function showScreen(screenId, pushHistory = true) {
    // 1. إيقاف أي مؤقتات نشطة عند مغادرة شاشة اللعب
    if (screenId !== 'game-screen') {
        clearInterval(timerInterval);
    }

    // 2. إخفاء جميع الشاشات (هذا يحل مشكلة ظهور الشاشة تحت الأخرى)
    const screens = document.querySelectorAll('.screen');
    screens.forEach(screen => {
        screen.classList.remove('active');
    });

    // 3. إظهار الشاشة المطلوبة
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
    }

    // 4. تحديث سجل التصفح
    if (pushHistory) {
        // منع تكرار الشاشة الحالية في السجل
        if (HISTORY[HISTORY.length - 1] !== screenId) {
            HISTORY.push(screenId);
        }
    } else {
        // إذا لم يتم الدفع، يجب أن تكون هذه عملية رجوع لذا نحذف آخر عنصر
        HISTORY.pop();
    }
    
    // 5. تحديث محتويات الشاشات إذا كانت تتطلب ذلك
    if (screenId === 'profile-screen') {
        updateProfileScreen();
    }
    if (screenId === 'leaderboard-screen') {
        fetchLeaderboard();
    }
    
    // 6. تحديث زر الرجوع
    updateBackButton(screenId);
}

function goBack() {
    // نضمن أن شاشة البداية لا يمكن الرجوع إليها
    if (HISTORY.length > 1) {
        HISTORY.pop(); // حذف الشاشة الحالية من السجل
        const previousScreenId = HISTORY[HISTORY.length - 1];
        showScreen(previousScreenId, false); // إظهار الشاشة السابقة دون إضافة إلى السجل
    }
}


// =======================================================
// شاشة الدخول (Splash Screen)
// =======================================================

function saveAndEnter() {
    const inputName = document.getElementById('user-name').value.trim();
    if (inputName) {
        userName = inputName;
        saveUserData();
        document.getElementById('display-user-name').textContent = userName;
        showScreen('main-menu');
    } else {
        alert("الرجاء إدخال اسمك الكريم للمتابعة!");
    }
}

// =======================================================
// شاشة اللعب
// =======================================================

function startGame(level, type) {
    currentQuestions = getRandomQuestions(level, type);
    currentQuestionIndex = 0;
    showQuestion();
    showScreen('game-screen');
}

function showQuestion() {
    if (currentQuestionIndex >= currentQuestions.length) {
        endGame();
        return;
    }

    clearInterval(timerInterval);
    startTimer();

    const q = currentQuestions[currentQuestionIndex];
    document.getElementById('question-text').textContent = q.question;
    document.getElementById('question-counter').textContent = `السؤال ${currentQuestionIndex + 1} من ${currentQuestions.length}`;
    
    const answersContainer = document.getElementById('answers-container');
    answersContainer.innerHTML = '';
    
    // خلط الإجابات
    const answers = shuffleArray(q.answers.slice());

    answers.forEach(answer => {
        const button = document.createElement('button');
        button.textContent = answer;
        button.onclick = () => checkAnswer(button, answer, q.correctAnswer);
        answersContainer.appendChild(button);
    });
}

function startTimer() {
    let timeLeft = TIME_LIMIT;
    const timerCircle = document.getElementById('timer-circle');
    const timerText = document.getElementById('timer-text');
    timerText.textContent = timeLeft;

    timerInterval = setInterval(() => {
        timeLeft--;
        timerText.textContent = timeLeft;
        if (timeLeft <= 5) {
            timerCircle.style.borderColor = 'var(--wrong-color)';
        } else {
            timerCircle.style.borderColor = 'var(--accent-color)';
        }
        
        if (timeLeft <= 0) {
            clearInterval(timerInterval);
            handleTimeout();
        }
    }, 1000);
}

function handleTimeout() {
    // نمنع المستخدم من الضغط على الأزرار بعد انتهاء الوقت
    Array.from(document.getElementById('answers-container').children).forEach(btn => {
        btn.disabled = true;
        // إظهار الإجابة الصحيحة كمرجع
        if (btn.textContent === currentQuestions[currentQuestionIndex].correctAnswer) {
            btn.classList.add('correct-answer');
        }
    });

    totalAnswered++;
    totalWrong++;
    saveUserData();

    // ننتقل للسؤال التالي بعد ثانية ونصف
    setTimeout(() => {
        currentQuestionIndex++;
        showQuestion();
    }, 1500);
}


function checkAnswer(selectedButton, selectedAnswer, correctAnswer) {
    clearInterval(timerInterval);

    // تعطيل جميع الأزرار بعد الإجابة
    Array.from(document.getElementById('answers-container').children).forEach(btn => {
        btn.disabled = true;
    });

    totalAnswered++;

    if (selectedAnswer === correctAnswer) {
        selectedButton.classList.add('correct-answer');
        totalCorrect++;
        userPoints += 10; // زيادة النقاط
    } else {
        selectedButton.classList.add('wrong-answer');
        totalWrong++;
        // إظهار الإجابة الصحيحة
        Array.from(document.getElementById('answers-container').children).forEach(btn => {
            if (btn.textContent === correctAnswer) {
                btn.classList.add('correct-answer');
            }
        });
    }

    saveUserData();
    updatePointsDisplay();

    // الانتقال للسؤال التالي
    setTimeout(() => {
        currentQuestionIndex++;
        showQuestion();
    }, 1500);
}

function endGame() {
    alert(`انتهت الأسئلة! نقاطك النهائية: ${userPoints}`);
    // وظيفة إرسال النتيجة إلى Google Sheets (تحتاج إلى تطبيق)
    // saveScoreToLeaderboard(userName, userPoints); 
    showScreen('main-menu');
}


// =======================================================
// وظائف المساعدة (Help Buttons)
// =======================================================
function useRemoveOption() {
    if (userPoints >= 20) {
        // كود إزالة خيارين خاطئين (للاختيار من متعدد)
        userPoints -= 20;
        saveUserData();
        updatePointsDisplay();
        // (يجب تطبيق وظيفة الإزالة على أزرار الإجابة)
        alert("تم إزالة خيار خاطئ! (نقص 20 نقطة)");
        // تعطيل الزر مؤقتاً
        event.target.disabled = true;
    } else {
        alert("نقاطك غير كافية لاستخدام هذه المساعدة.");
    }
}

function useChangeQuestion() {
    if (userPoints >= 30) {
        userPoints -= 30;
        saveUserData();
        updatePointsDisplay();
        currentQuestionIndex++; // تخطي السؤال الحالي
        showQuestion();
        alert("تم تغيير السؤال! (نقص 30 نقطة)");
        event.target.disabled = true;
    } else {
        alert("نقاطك غير كافية لاستخدام هذه المساعدة.");
    }
}

function useAddTime() {
    if (userPoints >= 25) {
        userPoints -= 25;
        saveUserData();
        updatePointsDisplay();
        // إضافة 5 ثواني للمؤقت الحالي (تحتاج إلى الوصول لـ timeLeft)
        clearInterval(timerInterval);
        TIME_LIMIT += 5; 
        startTimer(); // إعادة تشغيل المؤقت بالوقت الجديد
        alert("تم إضافة 5 ثوانٍ! (نقص 25 نقطة)");
        event.target.disabled = true;
    } else {
        alert("نقاطك غير كافية لاستخدام هذه المساعدة.");
    }
}

// =======================================================
// شاشة الملف الشخصي
// =======================================================

function updateProfileScreen() {
    document.getElementById('profile-name').textContent = userName;
    document.getElementById('total-answered').textContent = totalAnswered;
    document.getElementById('total-correct').textContent = totalCorrect;
    document.getElementById('total-wrong').textContent = totalWrong;
    document.getElementById('profile-points').textContent = userPoints;
}


// =======================================================
// لوحة الصدارة
// =======================================================

// وظيفة جلب البيانات من Google Apps Script (تحتاج لتعديل الرابط)
const LEADERBOARD_API_URL = 'ادخل_هنا_رابط_API_الخاص_بك_من_Apps_Script';

async function fetchLeaderboard() {
    const listElement = document.getElementById('leaderboard-list');
    listElement.innerHTML = '<li>جاري تحميل لوحة الصدارة...</li>';

    try {
        const response = await fetch(`${LEADERBOARD_API_URL}?action=getLeaderboard`);
        const data = await response.json();
        
        if (data.status === 'success' && data.leaderboard) {
            listElement.innerHTML = '';
            data.leaderboard.forEach((item, index) => {
                const li = document.createElement('li');
                
                // تحديد ما إذا كان المستخدم الحالي هو أحد الأوائل
                const isCurrentUser = item.name === userName;
                if (isCurrentUser) {
                    li.classList.add('is-user');
                }

                li.innerHTML = `
                    <span class="rank">#${index + 1}</span>
                    <span class="name">${item.name}</span>
                    <span class="points">${item.points} ⭐</span>
                `;
                listElement.appendChild(li);
            });
        } else {
            listElement.innerHTML = '<li>عذراً، لم يتم العثور على بيانات الصدارة.</li>';
        }
    } catch (error) {
        console.error('Error fetching leaderboard:', error);
        listElement.innerHTML = '<li>حدث خطأ في الاتصال بالخادم.</li>';
    }
}


// =======================================================
// التواصل (Modal)
// =======================================================
function openContactModal() {
    document.getElementById('contact-modal').style.display = 'block';
}

function closeContactModal() {
    document.getElementById('contact-modal').style.display = 'none';
}

// =======================================================
// تهيئة التطبيق عند البدء
// =======================================================

function initializeApp() {
    updatePointsDisplay();

    if (userName) {
        document.getElementById('display-user-name').textContent = userName;
        // إذا كان هناك اسم محفوظ، ننتقل مباشرة إلى القائمة الرئيسية
        showScreen('main-menu', false);
    } else {
        // إذا لم يكن هناك اسم، نبقى في شاشة البداية
        showScreen('splash-screen', false);
    }
}

// =======================================================
// وظائف أخرى (Shuffle)
// =======================================================
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

function getRandomQuestions(level, type) {
    const filtered = QUESTIONS.filter(q => q.level === level && q.type === type);
    return shuffleArray(filtered).slice(0, 10); // ناخذ 10 أسئلة عشوائية
}


// التشغيل عند تحميل الصفحة
window.onload = initializeApp;
